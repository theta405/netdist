import socket
import pickle
from struct import Struct
import pathlib

CHUNK_SIZE = 1024
STRUCT = Struct("!I")
TIMEOUT = 5  # 超时时间，单位为秒
WINDOW_SIZE = 100  # 窗口大小

def receive_full_data(sock, size):
    data = bytearray()
    while len(data) < size:
        packet = sock.recv(size - len(data))
        if not packet:
            raise ConnectionError("Socket connection broken")
        data.extend(packet)
    return data

def receive_packet(sock):
    size_data = sock.recv(STRUCT.size)
    if not size_data:
        return None
    size = STRUCT.unpack(size_data)[0]
    data = receive_full_data(sock, size)
    return pickle.loads(data)

def receive_ack(sock):
    try:
        ack = sock.recv(STRUCT.size)
        if ack:
            return STRUCT.unpack(ack)[0]
    except socket.timeout:
        return None
    return None

def send_ack(sock, order):
    ack = STRUCT.pack(order)
    sock.sendall(ack)

def send_packet(sock, packet):
    serialized_packet = pickle.dumps(packet)
    packet_length = STRUCT.pack(len(serialized_packet))
    sock.sendall(packet_length)
    sock.sendall(serialized_packet)

def send_with_ack(sock, packets_generator):
    base = 0
    next_seq = 0
    packets = {}

    while True:
        while next_seq < base + WINDOW_SIZE:
            try:
                packet = next(packets_generator)
                packets[next_seq] = packet
                send_packet(sock, packet)
                next_seq += 1
            except StopIteration:
                break

        if base == next_seq:
            break

        sock.settimeout(TIMEOUT)
        try:
            ack = receive_ack(sock)
            if ack is not None and ack >= base:
                # 清除已确认的分片
                for i in range(base, ack + 1):
                    if i in packets:
                        del packets[i]
                base = ack + 1
        except socket.timeout:
            for i in range(base, next_seq):
                if i in packets:
                    send_packet(sock, packets[i])

def file_generator(f):
    while True:
        packet = yield
        if packet['operation'] == 'stop':
            f.close()
        else:
            chunk_data = packet['data']
            f.write(chunk_data)
            f.flush()

def object_generator():
    obj_chunks = []
    while True:
        packet = yield
        if packet['operation'] == 'stop':
            serialized_obj = b''.join(obj_chunks)
            obj = pickle.loads(serialized_obj)
            print("Received object:", obj)
            obj_chunks.clear()
        else:
            chunk_data = packet['data']
            obj_chunks.append(chunk_data)

def file_packets_generator(file_path):
    path = pathlib.Path(file_path)
    if not path.is_file():
        print(f"File {file_path} does not exist.")
        return
    order = 1
    with path.open('rb') as f:
        while True:
            chunk = f.read(CHUNK_SIZE)
            if not chunk:
                break
            packet = {
                "operation": "file",
                "order": order,
                "data": chunk,
                "message": {"file_name": path.name}
            }
            yield packet
            order += 1
    end_packet = {
        "operation": "stop",
        "order": order,
        "data": b'',
        "message": {"file_name": path.name}
    }
    yield end_packet

def object_packets_generator(obj):
    serialized_obj = pickle.dumps(obj)
    chunks = [serialized_obj[i:i + CHUNK_SIZE] for i in range(0, len(serialized_obj), CHUNK_SIZE)]
    order = 1
    for chunk in chunks:
        packet = {
            "operation": "object",
            "order": order,
            "data": chunk,
            "message": {}
        }
        yield packet
        order += 1
    end_packet = {
        "operation": "stop",
        "order": order,
        "data": b'',
        "message": {}
    }
    yield end_packet

def handle_client(conn):
    try:
        packet = receive_packet(conn)
        if not packet:
            return
        first_operation = operation = packet["operation"]
        if operation == "file":
            file_name = packet['message']['file_name']
            path = pathlib.Path(file_name)
            file = open(path, "wb")
            generator = file_generator(file)
        elif operation == "object":
            generator = object_generator()

        next(generator)
        generator.send(packet)
        send_ack(conn, packet['order'])
        
        while True:
            packet = receive_packet(conn)
            if not packet:
                break

            generator.send(packet)
            operation = packet["operation"]
            if operation == "stop":
                break
            send_ack(conn, packet['order'])

        # 处理完成后，根据类型返回文件或对象
        if first_operation == "file":
            file_path = "example.txt"  # 返回的文件
            packets_generator = file_packets_generator(file_path)
            send_with_ack(conn, packets_generator)
        elif first_operation == "object":
            response_obj = {"result": "ok"}  # 返回的对象
            packets_generator = object_packets_generator(response_obj)
            send_with_ack(conn, packets_generator)

    except Exception as e:
        print(f"An error occurred while handling client: {e}")

def start_server(host='0.0.0.0', port=65432):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((host, port))
        s.listen()
        print("Server started and listening on", host, port)
        while True:
            print("Waiting for new connection")
            conn, addr = s.accept()
            with conn:
                print("Connected by", addr)
                handle_client(conn)

if __name__ == "__main__":
    start_server()
